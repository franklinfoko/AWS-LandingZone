Resources:
  ResourceNamePrefixesResourceNamePrefixesFunctionServiceRole17DDBBF2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/ResourceNamePrefixes/ResourceNamePrefixesFunction/ServiceRole/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Needed to write to CWL group
          - id: AwsSolutions-IAM5
            reason: Needed to create SSM parameter for prefix
  ResourceNamePrefixesResourceNamePrefixesFunctionServiceRoleDefaultPolicyDC1CC159:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ssm:GetParameters
              - ssm:GetParameter
              - ssm:PutParameter
              - ssm:DeleteParameter
            Condition:
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':ssm:'
                  - !Ref AWS::Region
                  - ':'
                  - !Ref AWS::AccountId
                  - ':parameter/accelerator/lza-prefix'
              - !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':ssm:'
                  - !Ref AWS::Region
                  - ':'
                  - !Ref AWS::AccountId
                  - ':parameter/accelerator/AWSAccelerator-PipelineStack-'
                  - !Ref AWS::AccountId
                  - '-'
                  - !Ref AWS::Region
                  - /version
            Sid: SsmReadParameterAccess
        Version: '2012-10-17'
      PolicyName: ResourceNamePrefixesResourceNamePrefixesFunctionServiceRoleDefaultPolicyDC1CC159
      Roles:
        - !Ref ResourceNamePrefixesResourceNamePrefixesFunctionServiceRole17DDBBF2
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/ResourceNamePrefixes/ResourceNamePrefixesFunction/ServiceRole/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Needed to write to CWL group
          - id: AwsSolutions-IAM5
            reason: Needed to create SSM parameter for prefix
  ResourceNamePrefixesResourceNamePrefixesFunction138C66F1:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |2-
                    const response = require('cfn-response');
                    const { SSMClient, DeleteParameterCommand, GetParameterCommand, ParameterNotFound, PutParameterCommand } = require("@aws-sdk/client-ssm");
                    const { ConfiguredRetryStrategy } = require("@aws-sdk/util-retry");
                    exports.handler = async function (event, context) {
                    console.log(JSON.stringify(event, null, 4));
                    const prefix=event.ResourceProperties.prefix;
                    const pipelineStackVersionSsmParamName=event.ResourceProperties.pipelineStackVersionSsmParamName;
                    const lowerCasePrefix=prefix.toLowerCase();
                    const ssm = new SSMClient({retryStrategy: new ConfiguredRetryStrategy(10, (attempt) => 100 + attempt * 1000)});
                    let data = {};
                    let paramName = event.ResourceProperties.prefixParameterName;
                    if (lowerCasePrefix === 'awsaccelerator') {
                        data['acceleratorPrefix'] = 'AWSAccelerator';
                        data['lowerCasePrefix'] = 'aws-accelerator';
                        data['oneWordPrefix'] = 'accelerator';
                    } else {
                        data['acceleratorPrefix'] = prefix;
                        data['lowerCasePrefix'] = lowerCasePrefix;
                        data['oneWordPrefix'] = prefix;
                    }
                    if (event.RequestType === 'Update'){
                        var params = {
                          Name: paramName,
                        };
                        try {
                            const ssmResponse = await ssm.send(new GetParameterCommand(params));
                            // Fail stack if prefix was changed during update
                            if (ssmResponse.Parameter.Value !== prefix) {
                                await response.send(event, context, response.FAILED, {'FailureReason': 'LZA does not allow changing AcceleratorPrefix parameter value after initial deploy !!! Existing prefix: ' + event.OldResourceProperties.prefix + ' New prefix: ' + prefix + '.' }, event.PhysicalResourceId);
                                return;
                            }
                            await response.send(event, context, response.SUCCESS, data, event.PhysicalResourceId);
                        } catch (error) {
                            console.log(error);
                            if (error instanceof ParameterNotFound){
                                await response.send(event, context, response.FAILED, {'FailureReason': 'LZA prefix ssm parameter ' + paramName + ' not found!!! Recreate the parameter with existing AcceleratorPrefix parameter value to fix the issue'}, event.PhysicalResourceId);
                                return;
                            }
                            else {
                                await response.send(event, context, response.FAILED, {'FailureReason': error.code + ' error occurred while accessing LZA prefix ssm parameter ' + paramName }, event.PhysicalResourceId);
                                return;
                            }
                        }
                    }
                    if (event.RequestType === 'Create') {
                        if (lowerCasePrefix !== 'awsaccelerator') {
                            // Fail stack if prefix starts with aws or ssm
                            if (lowerCasePrefix.startsWith('aws') || lowerCasePrefix.startsWith('ssm')) {
                                await response.send(event, context, response.FAILED, {'FailureReason': 'Accelerator prefix ' + prefix + ' can not be started with aws or ssm !!!'}, event.PhysicalResourceId);
                                return;
                            }
                            // Check if this is an existing deployment and prefix changed with initial deployment of custom resource
                            var versionParams = {
                              Name: pipelineStackVersionSsmParamName,
                            };
                            try {
                              await ssm.send(new GetParameterCommand(versionParams));
                              await response.send(event, context, response.FAILED, {'FailureReason': 'Can not change AcceleratorPrefix parameter for existing deployment, existing prefix value is AWSAccelerator, keep AcceleratorPrefix parameter value to default value for successfully stack update !!!'}, event.PhysicalResourceId);
                              return;
                            }
                            catch (error) {
                              console.log(error);
                              if (!(error instanceof ParameterNotFound)){
                                await response.send(event, context, response.FAILED, {'FailureReason': error.code + ' error occurred while accessing LZA ssm parameter ' + pipelineStackVersionSsmParamName }, event.PhysicalResourceId);
                                return;
                              }
                            }
                        }
                        // Create /accelerator/lza-prefix SSM parameter to store prefix value to protect updating prefix
                        try {
                            var newParams = {
                                  Name: paramName,
                                  Value: prefix,
                                  Description: 'LZA created SSM parameter for Accelerator prefix value, DO NOT MODIFY/DELETE this parameter',
                                  Type: 'String',
                                };
                            await ssm.send(new PutParameterCommand(newParams));
                            await response.send(event, context, response.SUCCESS, data, event.PhysicalResourceId);
                        }
                        catch (error) {
                            console.log(error);
                            await response.send(event, context, response.FAILED, {'FailureReason': error.code + ' error occurred while creating LZA prefix ssm parameter ' + paramName }, event.PhysicalResourceId);
                            return;
                        }
                    }
                    if (event.RequestType === 'Delete') {
                      var deleteParams = {
                        Name: paramName,
                      };
                      try {
                        await ssm.send(new DeleteParameterCommand(deleteParams));
                      }
                      catch (error) {
                        console.log(error);
                        if (!(error instanceof ParameterNotFound)){
                          await response.send(event, context, response.FAILED, {'FailureReason': error.code + ' error occurred while deleting LZA ssm parameter ' + paramName }, event.PhysicalResourceId);
                          return;
                        }
                      }
                      await response.send(event, context, response.SUCCESS, {'Status': 'Custom resource deleted successfully' }, event.PhysicalResourceId);
                    }
                    return;
                }
      Description: This function converts accelerator prefix parameter to lower case
        to name s3 buckets in installer stack
      Handler: index.handler
      Role: !GetAtt ResourceNamePrefixesResourceNamePrefixesFunctionServiceRole17DDBBF2.Arn
      Runtime: nodejs18.x
    DependsOn:
      - ResourceNamePrefixesResourceNamePrefixesFunctionServiceRoleDefaultPolicyDC1CC159
      - ResourceNamePrefixesResourceNamePrefixesFunctionServiceRole17DDBBF2
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/ResourceNamePrefixes/ResourceNamePrefixesFunction/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Needed to write to CWL group
          - id: AwsSolutions-IAM5
            reason: Needed to create SSM parameter for prefix
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole
          - id: W89
            reason: This function supports infrastructure deployment and is not deployed
              inside a VPC.
          - id: W92
            reason: This function supports infrastructure deployment and does not require
              setting ReservedConcurrentExecutions.
  ResourceNamePrefixesGetPrefixResource96A10E6E:
    Type: Custom::GetPrefixes
    Properties:
      ServiceToken: !GetAtt ResourceNamePrefixesResourceNamePrefixesFunction138C66F1.Arn
      prefix: !Ref AcceleratorPrefix
      pipelineStackVersionSsmParamName: !Join
        - ''
        - - /accelerator/AWSAccelerator-PipelineStack-
          - !Ref AWS::AccountId
          - '-'
          - !Ref AWS::Region
          - /version
      prefixParameterName: /accelerator/lza-prefix
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/ResourceNamePrefixes/GetPrefixResource/Default
  ValidateInstallerValidationFunctionServiceRoleF5BE8F9B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/ValidateInstaller/ValidationFunction/ServiceRole/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Needed to write to CWL group
  ValidateInstallerValidationFunctionServiceRoleDefaultPolicyAA8D9A47:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: codepipeline:GetPipeline
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:'
                - !Ref AWS::Partition
                - ':codepipeline:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':'
                - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
                - '-Pipeline'
            Sid: ReadCodePipeline
        Version: '2012-10-17'
      PolicyName: ValidateInstallerValidationFunctionServiceRoleDefaultPolicyAA8D9A47
      Roles:
        - !Ref ValidateInstallerValidationFunctionServiceRoleF5BE8F9B
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/ValidateInstaller/ValidationFunction/ServiceRole/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Needed to write to CWL group
  ValidateInstallerValidationFunction21674768:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const { CodePipelineClient, GetPipelineCommand } = require('@aws-sdk/client-codepipeline');
          exports.handler = async function (event, context) {
            console.log(JSON.stringify(event, null, 4));
            const configRepositoryLocation = event.ResourceProperties.configRepositoryLocation;
            if (event.RequestType === 'Delete') {
              await response.send(event, context, response.SUCCESS, {}, event.PhysicalResourceId);
              return;
            }
            if (configRepositoryLocation === 's3') {
              try {
                const pipelineName = event.ResourceProperties.acceleratorPipelineName;
                const client = new CodePipelineClient();
                const input = { name: pipelineName };
                const command = new GetPipelineCommand(input);
                const pipelineResponse = await client.send(command);
                const sourceStage = pipelineResponse.pipeline.stages.find(stage => stage.name === 'Source');
                const configAction = sourceStage?.actions.find(action => action.name === 'Configuration');
                if (configAction.actionTypeId.provider === 'CodeCommit') {
                  await response.send(
                    event,
                    context,
                    response.FAILED,
                    {
                      FailureReason:
                        'ConfigRepositoryLocation parameter set to s3, but existing deployment using CodeCommit was detected. This value cannot be changed for existing deployments. Please set ConfigRepositoryLocation to CodeCommit and try again.',
                    },
                    event.PhysicalResourceId,
                  );
                  return;
                }
              } catch (err) {
                console.log('Encountered error finding existing pipeline, continuing');
                console.log(err);
                await response.send(event, context, response.SUCCESS, {}, event.PhysicalResourceId);
                return;
              }
            }
            // End of Validation
            await response.send(event, context, response.SUCCESS, {}, event.PhysicalResourceId);
            return;
          };
      Description: This function validates installer parameters
      Handler: index.handler
      Role: !GetAtt ValidateInstallerValidationFunctionServiceRoleF5BE8F9B.Arn
      Runtime: nodejs18.x
    DependsOn:
      - ValidateInstallerValidationFunctionServiceRoleDefaultPolicyAA8D9A47
      - ValidateInstallerValidationFunctionServiceRoleF5BE8F9B
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/ValidateInstaller/ValidationFunction/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Needed to write to CWL group
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole
          - id: W89
            reason: This function supports infrastructure deployment and is not deployed
              inside a VPC.
          - id: W92
            reason: This function supports infrastructure deployment and does not require
              setting ReservedConcurrentExecutions.
  ValidateInstallerValidateResource24181D5D:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ValidateInstallerValidationFunction21674768.Arn
      acceleratorPipelineName: !Join
        - ''
        - - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
          - '-Pipeline'
      configRepositoryLocation: !Ref ConfigurationRepositoryLocation
      resourceType: Custom::ValidateInstallerStack
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/ValidateInstaller/ValidateResource/Default
  SsmParamStackId521A78D3:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /
          - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.oneWordPrefix
          - /AWSAccelerator-InstallerStack/stack-id
      Type: String
      Value: !Ref AWS::StackId
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/SsmParamStackId/Resource
  SsmParamAcceleratorVersionFF83282D:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /
          - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.oneWordPrefix
          - /AWSAccelerator-InstallerStack/version
      Type: String
      Value: 1.10.0
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/SsmParamAcceleratorVersion/Resource
  SolutionHelperServiceRoleF70C0E2A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/SolutionHelper/SolutionHelper/ServiceRole/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Needed to write to CWL group
  SolutionHelper4825923B:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |2-
                  const response = require('cfn-response');
                  const https = require('https');
                  async function post(url, data) {
                    const dataString = JSON.stringify(data)
                    const options = {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        timeout: 1000, // in ms
                    }
                    return new Promise((resolve, reject) => {
                        const req = https.request(url, options, (res) => {
                            if (res.statusCode < 200 || res.statusCode > 299) {
                                return reject(new Error('HTTP status code: ', res.statusCode))
                            }
                            const body = []
                            res.on('data', (chunk) => body.push(chunk))
                            res.on('end', () => {
                                const resString = Buffer.concat(body).toString()
                                resolve(resString)
                            })
                        })
                        req.on('error', (err) => {
                            reject(err)
                        })
                        req.on('timeout', () => {
                            req.destroy()
                            reject(new Error('Request time out'))
                        })
                        req.write(dataString)
                        req.end()
                    })
                  }
                  function uuidv4() {
                    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                        return v.toString(16);
                    });
                  }
                  function sanitizeData(resourceProperties) {
                    const keysToExclude = ['ServiceToken', 'Resource', 'SolutionId', 'UUID'];
                    return Object.keys(resourceProperties).reduce((sanitizedData, key) => {
                        if (!keysToExclude.includes(key)) {
                            sanitizedData[key] = resourceProperties[key];
                        }
                        return sanitizedData;
                    }, {})
                  }
                  exports.handler = async function (event, context) {
                    console.log(JSON.stringify(event, null, 4));
                    const requestType = event.RequestType;
                    const resourceProperties = event.ResourceProperties;
                    const resource = resourceProperties.Resource;
                    let data = {};
                    try {
                        if (resource === 'UUID' && requestType === 'Create') {
                            data['UUID'] = uuidv4();
                        }
                        if (resource === 'AnonymousMetric') {
                            const currentDate = new Date()
                            data = sanitizeData(resourceProperties);
                            data['RequestType'] = requestType;
                            const payload = {
                                Solution: resourceProperties.SolutionId,
                                UUID: resourceProperties.UUID,
                                TimeStamp: currentDate.toISOString(),
                                Data: data
                            }
                            console.log('Sending metrics data: ', JSON.stringify(payload, null, 2));
                            await post('https://metrics.awssolutionsbuilder.com/generic', payload);
                            console.log('Sent Data');
                        }
                    } catch (error) {
                        console.log(error);
                    }
                    if (requestType === 'Create') {
                      await response.send(event, context, response.SUCCESS, data);
                    }
                    else {
                      await response.send(event, context, response.SUCCESS, data, event.PhysicalResourceId);
                    }
                    return;
                  }

      Description: This function generates UUID for each deployment and sends
        anonymous data to the AWS Solutions team
      Handler: index.handler
      Role: !GetAtt SolutionHelperServiceRoleF70C0E2A.Arn
      Runtime: nodejs18.x
      Timeout: 30
    DependsOn:
      - SolutionHelperServiceRoleF70C0E2A
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole
          - id: W89
            reason: This function supports infrastructure deployment and is not deployed
              inside a VPC.
          - id: W92
            reason: This function supports infrastructure deployment and does not require
              setting ReservedConcurrentExecutions.
    Condition: SolutionHelperAnonymousDataToAWS62E4FDE2
  SolutionHelperSolutionCreateUniqueID070ED802:
    Type: Custom::CreateUUID
    Properties:
      ServiceToken: !GetAtt SolutionHelper4825923B.Arn
      Resource: UUID
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/SolutionHelper/SolutionCreateUniqueID/Default
    Condition: SolutionHelperAnonymousDataToAWS62E4FDE2
  SolutionHelperSolutionSendAnonymousData271B3D26:
    Type: Custom::AnonymousData
    Properties:
      ServiceToken: !GetAtt SolutionHelper4825923B.Arn
      Resource: AnonymousMetric
      SolutionId: SO0199
      UUID: !GetAtt SolutionHelperSolutionCreateUniqueID070ED802.UUID
      Region: !Ref AWS::Region
      BranchName: !Ref RepositoryBranchName
      RepositoryName: !Ref RepositoryName
      RepositoryOwner: !Ref RepositoryOwner
      RepositorySource: !Ref RepositorySource
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/SolutionHelper/SolutionSendAnonymousData/Default
    Condition: SolutionHelperAnonymousDataToAWS62E4FDE2
  InstallerKey2A6A8C6D:
    Type: AWS::KMS::Key
    Properties:
      Description: AWS Accelerator Management Account Kms Key
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':iam::'
                  - !Ref AWS::AccountId
                  - ':root'
            Action: kms:*
            Resource: '*'
          - Sid: Allow Accelerator Role to use the encryption key
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
            Condition:
              ArnLike:
                aws:PrincipalARN: !Join
                  - ''
                  - - 'arn:'
                    - !Ref AWS::Partition
                    - ':iam::'
                    - !Ref AWS::AccountId
                    - ':role/'
                    - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
                    - '-*'
          - Sid: Allow SNS service to use the encryption key
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow Cloudwatch Logs service to use the encryption key
            Effect: Allow
            Principal:
              Service: !Join
                - ''
                - - logs.
                  - !Ref AWS::Region
                  - .amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Join
                  - ''
                  - - 'arn:'
                    - !Ref AWS::Partition
                    - ':logs:'
                    - !Ref AWS::Region
                    - ':'
                    - !Ref AWS::AccountId
                    - ':log-group:*'
          - !If
            - IsCommercialCondition
            - Sid: KMS key access to codestar-notifications
              Effect: Allow
              Principal:
                Service: codestar-notifications.amazonaws.com
              Action:
                - kms:GenerateDataKey*
                - kms:Decrypt
              Resource: '*'
              Condition:
                StringEquals:
                  kms:ViaService: !Join
                    - ''
                    - - sns.
                      - !Ref AWS::Region
                      - .amazonaws.com
            - !Ref AWS::NoValue
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: KMS key using * principal with added arn condition
  InstallerKeyAliasD5C174F0:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join
        - ''
        - - alias/
          - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.oneWordPrefix
          - /installer/kms/key
      TargetKeyId: !GetAtt InstallerKey2A6A8C6D.Arn
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/InstallerKey/Alias/Resource
  AcceleratorManagementKmsArnParameter1E6975BF:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /
          - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.oneWordPrefix
          - /installer/kms/key-arn
      Type: String
      Value: !GetAtt InstallerKey2A6A8C6D.Arn
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/AcceleratorManagementKmsArnParameter/Resource
  InstallerAccessLogsBucket647700E9:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Join
        - ''
        - - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.lowerCasePrefix
          - '-s3-logs-'
          - !Ref AWS::AccountId
          - '-'
          - !Ref AWS::Region
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 1825
            ExpiredObjectDeleteMarker: false
            Id: !Join
              - ''
              - - LifecycleRule
                - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.lowerCasePrefix
                - '-s3-logs-'
                - !Ref AWS::AccountId
                - '-'
                - !Ref AWS::Region
            NoncurrentVersionExpiration:
              NoncurrentDays: 1825
            NoncurrentVersionTransitions:
              - StorageClass: DEEP_ARCHIVE
                TransitionInDays: 366
            Status: Enabled
            Transitions:
              - StorageClass: DEEP_ARCHIVE
                TransitionInDays: 365
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: This is an access logging bucket.
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-S1
            reason: AccessLogsBucket has server access logs disabled till the task for
              access logging completed.
  InstallerAccessLogsBucketPolicy20D4E285:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InstallerAccessLogsBucket647700E9
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
            Effect: Deny
            Principal:
              AWS: '*'
            Resource:
              - !GetAtt InstallerAccessLogsBucket647700E9.Arn
              - !Join
                - ''
                - - !GetAtt InstallerAccessLogsBucket647700E9.Arn
                  - /*
            Sid: deny-insecure-connections
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/InstallerAccessLogsBucket/Resource/Policy/Resource
  InstallerAccessLogsBucketName4F700F48:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - /
          - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.oneWordPrefix
          - /installer-access-logs-bucket-name
      Type: String
      Value: !Ref InstallerAccessLogsBucket647700E9
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/InstallerAccessLogsBucketName/Resource
  SecureBucket747CD8C0:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt InstallerKey2A6A8C6D.Arn
              SSEAlgorithm: aws:kms
      BucketName: !Join
        - ''
        - - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.lowerCasePrefix
          - '-installer-'
          - !Ref AWS::AccountId
          - '-'
          - !Ref AWS::Region
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 1825
            ExpiredObjectDeleteMarker: false
            Id: !Join
              - ''
              - - LifecycleRule
                - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.lowerCasePrefix
                - '-installer-'
                - !Ref AWS::AccountId
                - '-'
                - !Ref AWS::Region
            NoncurrentVersionExpiration:
              NoncurrentDays: 1825
            NoncurrentVersionTransitions:
              - StorageClass: DEEP_ARCHIVE
                TransitionInDays: 366
            Status: Enabled
            Transitions:
              - StorageClass: DEEP_ARCHIVE
                TransitionInDays: 365
      LoggingConfiguration:
        DestinationBucketName: !Ref InstallerAccessLogsBucket647700E9
        LogFilePrefix: !Join
          - ''
          - - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.lowerCasePrefix
            - '-installer-'
            - !Ref AWS::AccountId
            - '-'
            - !Ref AWS::Region
            - /
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/SecureBucket/Resource/Resource
  SecureBucketPolicy6374AC61:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SecureBucket747CD8C0
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
            Effect: Deny
            Principal:
              AWS: '*'
            Resource:
              - !GetAtt SecureBucket747CD8C0.Arn
              - !Join
                - ''
                - - !GetAtt SecureBucket747CD8C0.Arn
                  - /*
            Sid: deny-insecure-connections
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/SecureBucket/Resource/Policy/Resource
  InstallerAdminRole7DEE4AC8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/AdministratorAccess'
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/InstallerAdminRole/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Managed policies required for IAM role.
  InstallerAdminRoleDefaultPolicy7EEE1AAB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':logs:'
                  - !Ref AWS::Region
                  - ':'
                  - !Ref AWS::AccountId
                  - ':log-group:/aws/codebuild/'
                  - !Ref InstallerProject879FF821
              - !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':logs:'
                  - !Ref AWS::Region
                  - ':'
                  - !Ref AWS::AccountId
                  - ':log-group:/aws/codebuild/'
                  - !Ref InstallerProject879FF821
                  - ':*'
          - Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:'
                - !Ref AWS::Partition
                - ':codebuild:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':report-group/'
                - !Ref InstallerProject879FF821
                - '-*'
          - Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource: !GetAtt InstallerKey2A6A8C6D.Arn
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - !GetAtt SecureBucket747CD8C0.Arn
              - !Join
                - ''
                - - !GetAtt SecureBucket747CD8C0.Arn
                  - /*
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
            Effect: Allow
            Resource: !GetAtt InstallerKey2A6A8C6D.Arn
        Version: '2012-10-17'
      PolicyName: InstallerAdminRoleDefaultPolicy7EEE1AAB
      Roles:
        - !Ref InstallerAdminRole7DEE4AC8
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/InstallerAdminRole/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Managed policies required for IAM role.
          - id: AwsSolutions-IAM5
            reason: IAM role requires wildcard permissions.
  InstallerProject879FF821:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Type: NO_CACHE
      EncryptionKey: !GetAtt InstallerKey2A6A8C6D.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        EnvironmentVariables:
          - Name: NODE_OPTIONS
            Type: PLAINTEXT
            Value: '--max_old_space_size=12288 --no-warnings'
          - Name: CDK_NEW_BOOTSTRAP
            Type: PLAINTEXT
            Value: '1'
          - Name: ACCELERATOR_REPOSITORY_SOURCE
            Type: PLAINTEXT
            Value: !Ref RepositorySource
          - Name: ACCELERATOR_REPOSITORY_OWNER
            Type: PLAINTEXT
            Value: !Ref RepositoryOwner
          - Name: ACCELERATOR_REPOSITORY_NAME
            Type: PLAINTEXT
            Value: !Ref RepositoryName
          - Name: ACCELERATOR_REPOSITORY_BRANCH_NAME
            Type: PLAINTEXT
            Value: !Ref RepositoryBranchName
          - Name: CONFIG_REPOSITORY_LOCATION
            Type: PLAINTEXT
            Value: !Ref ConfigurationRepositoryLocation
          - Name: CODECONNECTION_ARN
            Type: PLAINTEXT
            Value: !Ref ConfigCodeConnectionArn
          - Name: USE_EXISTING_CONFIG_REPO
            Type: PLAINTEXT
            Value: !Ref UseExistingConfigRepo
          - Name: EXISTING_CONFIG_REPOSITORY_NAME
            Type: PLAINTEXT
            Value: !Ref ExistingConfigRepositoryName
          - Name: EXISTING_CONFIG_REPOSITORY_BRANCH_NAME
            Type: PLAINTEXT
            Value: !Ref ExistingConfigRepositoryBranchName
          - Name: EXISTING_CONFIG_REPOSITORY_OWNER
            Type: PLAINTEXT
            Value: !Ref ExistingConfigRepositoryOwner
          - Name: ACCELERATOR_ENABLE_APPROVAL_STAGE
            Type: PLAINTEXT
            Value: !Ref EnableApprovalStage
          - Name: APPROVAL_STAGE_NOTIFY_EMAIL_LIST
            Type: PLAINTEXT
            Value: !Join
              - ','
              - !Ref ApprovalStageNotifyEmailList
          - Name: MANAGEMENT_ACCOUNT_EMAIL
            Type: PLAINTEXT
            Value: !Ref ManagementAccountEmail
          - Name: LOG_ARCHIVE_ACCOUNT_EMAIL
            Type: PLAINTEXT
            Value: !Ref LogArchiveAccountEmail
          - Name: AUDIT_ACCOUNT_EMAIL
            Type: PLAINTEXT
            Value: !Ref AuditAccountEmail
          - Name: CONTROL_TOWER_ENABLED
            Type: PLAINTEXT
            Value: !Ref ControlTowerEnabled
          - Name: ACCELERATOR_PREFIX
            Type: PLAINTEXT
            Value: !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
          - Name: INSTALLER_STACK_NAME
            Type: PLAINTEXT
            Value: AWSAccelerator-InstallerStack
          - Name: ENABLE_DIAGNOSTICS_PACK
            Type: PLAINTEXT
            Value: !Ref EnableDiagnosticsPack
          - Name: PIPELINE_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
        Image: aws/codebuild/standard:7.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: false
        Type: LINUX_CONTAINER
      Name: !Join
        - ''
        - - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
          - '-InstallerProject'
      ServiceRole: !GetAtt InstallerAdminRole7DEE4AC8.Arn
      Source:
        BuildSpec: !Join
          - ''
          - - |-
              version: "0.2"
              phases:
                install:
                  runtime-versions:
                    nodejs: 18
                pre_build:
                  commands:
                    - ENABLE_EXTERNAL_PIPELINE_ACCOUNT="no"
                    - if [ ! -z "$MANAGEMENT_ACCOUNT_ID" ] && [ ! -z "$MANAGEMENT_ACCOUNT_ROLE_NAME" ]; then ENABLE_EXTERNAL_PIPELINE_ACCOUNT="yes"; fi
                    - set -e && if ! aws cloudformation describe-stacks --stack-name
            - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
            - '-CDKToolkit --region '
            - !Ref AWS::Region
            - |-
              ; then BOOTSTRAPPED_HOME="no"; fi
                    - set -e && if ! aws cloudformation describe-stacks --stack-name
            - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
            - '-CDKToolkit --region '
            - !FindInMap
              - GlobalRegionMap
              - !Ref AWS::Partition
              - regionName
            - |-
              ; then BOOTSTRAPPED_GLOBAL="no"; fi
                    - ENABLE_DIAGNOSTICS_PACK=
            - !Ref EnableDiagnosticsPack
            - |2-
                build:
                  commands:
                    - cd source
                    - |-
                      if [ "
            - !Ref AWS::Partition
            - |-
              " = "aws-cn" ]; then
                                        sed -i "s#registry.yarnpkg.com#registry.npmmirror.com#g" yarn.lock;
                                        set -e && yarn config set registry https://registry.npmmirror.com
                                     fi
                    - if [ -f .yarnrc ]; then yarn install --use-yarnrc .yarnrc; else yarn install; fi
                    - yarn build
                    - cd packages/@aws-accelerator/installer
                    - set -e && if [ "$BOOTSTRAPPED_HOME" = "no" ]; then yarn run cdk bootstrap --toolkitStackName
            - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
            - '-CDKToolkit aws://'
            - !Ref AWS::AccountId
            - /
            - !Ref AWS::Region
            - |2-
               --qualifier accel; fi
                    - set -e &&  if [ "$BOOTSTRAPPED_GLOBAL" = "no" ]; then yarn run cdk bootstrap --toolkitStackName
            - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
            - '-CDKToolkit aws://'
            - !Ref AWS::AccountId
            - /
            - !FindInMap
              - GlobalRegionMap
              - !Ref AWS::Partition
              - regionName
            - |2-
               --qualifier accel; fi
                    - |-
                      set -e && if [ $ENABLE_EXTERNAL_PIPELINE_ACCOUNT = "yes" ]; then
                                        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role --role-arn arn:
            - !Ref AWS::Partition
            - |-
              :iam::"$MANAGEMENT_ACCOUNT_ID":role/"$MANAGEMENT_ACCOUNT_ROLE_NAME" --role-session-name acceleratorAssumeRoleSession --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" --output text));
                                        if ! aws cloudformation describe-stacks --stack-name
            - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
            - '-CDKToolkit --region '
            - !Ref AWS::Region
            - |-
              ; then MGMT_BOOTSTRAPPED_HOME="no"; fi;
                                        if ! aws cloudformation describe-stacks --stack-name
            - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
            - '-CDKToolkit --region '
            - !FindInMap
              - GlobalRegionMap
              - !Ref AWS::Partition
              - regionName
            - |-
              ; then MGMT_BOOTSTRAPPED_GLOBAL="no"; fi;
                                        if [ "$MGMT_BOOTSTRAPPED_HOME" = "no" ]; then yarn run cdk bootstrap --toolkitStackName
            - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
            - '-CDKToolkit aws://$MANAGEMENT_ACCOUNT_ID/'
            - !Ref AWS::Region
            - |2-
               --qualifier accel; fi;
                                        if [ "$MGMT_BOOTSTRAPPED_GLOBAL" = "no" ]; then yarn run cdk bootstrap --toolkitStackName
            - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
            - '-CDKToolkit aws://$MANAGEMENT_ACCOUNT_ID/'
            - !FindInMap
              - GlobalRegionMap
              - !Ref AWS::Partition
              - regionName
            - |2-
               --qualifier accel; fi;
                                        unset AWS_ACCESS_KEY_ID;
                                        unset AWS_SECRET_ACCESS_KEY;
                                        unset AWS_SESSION_TOKEN;
                                     fi
                    - cd ../accelerator
                    - |-
                      aws ssm get-parameter --name /accelerator/migration --query "Parameter.Value" 2> /dev/null
                                        status=$?
                                        if [ $status -ne 0 ]; then
                                          echo "No SSM Parameter found, setting ENABLE_ASEA_MIGRATION to false";
                                          export ENABLE_ASEA_MIGRATION=false
                                        else
                                          echo "SSM Parameter Found, setting ENABLE_ASEA_MIGRATION to true"
                                          export ENABLE_ASEA_MIGRATION=true
                                        fi;
                    - |-
                      set -e && if [ $ENABLE_DIAGNOSTICS_PACK = "Yes" ]; then
                                      yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage diagnostics-pack --account
            - !Ref AWS::AccountId
            - ' --region '
            - !Ref AWS::Region
            - ' --partition '
            - !Ref AWS::Partition
            - |2-
                                    fi
                    - set -e && yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage pipeline --account
            - !Ref AWS::AccountId
            - ' --region '
            - !Ref AWS::Region
            - ' --partition '
            - !Ref AWS::Partition
            - |2-
                    - set -e && if [ "$ENABLE_TESTER" = "true" ]; then yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage tester-pipeline --account
            - !Ref AWS::AccountId
            - ' --region '
            - !Ref AWS::Region
            - |-
              ; fi
                post_build:
                  commands:
                    - |-
                      if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then
                                      inprogress_status_count=$(aws codepipeline get-pipeline-state --name "
            - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
            - |-
              -Pipeline" | grep '"status": "InProgress"' | grep -v grep | wc -l) &&
                                      if [ $inprogress_status_count -eq 0 ]; then
                                      set -e && aws codepipeline start-pipeline-execution --name "
            - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
            - |
              -Pipeline";
                                        fi
                                     fi
        Type: CODEPIPELINE
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/InstallerProject/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-CB3
            reason: Project requires access to the Docker daemon.
  CodeCommitPipelineRole5C35E76C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/CodeCommitPipelineRole/Resource
    Condition: UseCodeCommitCondition
  CodeCommitPipelineRoleDefaultPolicyDE8B332B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt SecureBucket747CD8C0.Arn
              - !Join
                - ''
                - - !GetAtt SecureBucket747CD8C0.Arn
                  - /*
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource: !GetAtt InstallerKey2A6A8C6D.Arn
          - Action: sts:AssumeRole
            Effect: Allow
            Resource: !GetAtt CodeCommitPipelineSourceCodePipelineActionRoleFB176191.Arn
          - Action: sts:AssumeRole
            Effect: Allow
            Resource: !GetAtt CodeCommitPipelineRole5C35E76C.Arn
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:StopBuild
            Effect: Allow
            Resource: !GetAtt InstallerProject879FF821.Arn
        Version: '2012-10-17'
      PolicyName: CodeCommitPipelineRoleDefaultPolicyDE8B332B
      Roles:
        - !Ref CodeCommitPipelineRole5C35E76C
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/CodeCommitPipelineRole/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM5
            reason: IAM role requires wildcard permissions.
    Condition: UseCodeCommitCondition
  CodeCommitPipeline2208527B:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        EncryptionKey:
          Id: !GetAtt InstallerKey2A6A8C6D.Arn
          Type: KMS
        Location: !Ref SecureBucket747CD8C0
        Type: S3
      Name: !Join
        - ''
        - - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
          - '-Installer'
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodeCommitPipelineRole5C35E76C.Arn
      Stages:
        - Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                RepositoryName: !Ref RepositoryName
                BranchName: !Ref RepositoryBranchName
                PollForSourceChanges: false
              Name: Source
              OutputArtifacts:
                - Name: Source
              RoleArn: !GetAtt CodeCommitPipelineSourceCodePipelineActionRoleFB176191.Arn
              RunOrder: 1
          Name: Source
        - Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref InstallerProject879FF821
              InputArtifacts:
                - Name: Source
              Name: Install
              RoleArn: !GetAtt CodeCommitPipelineRole5C35E76C.Arn
              RunOrder: 1
          Name: Install
    DependsOn:
      - CodeCommitPipelineRoleDefaultPolicyDE8B332B
      - CodeCommitPipelineRole5C35E76C
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/CodeCommitPipeline/Resource
    Condition: UseCodeCommitCondition
  CodeCommitPipelineSourceCodePipelineActionRoleFB176191:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':iam::'
                  - !Ref AWS::AccountId
                  - ':root'
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/CodeCommitPipeline/Source/Source/CodePipelineActionRole/Resource
    Condition: UseCodeCommitCondition
  CodeCommitPipelineSourceCodePipelineActionRoleDefaultPolicyF71E0C0D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt SecureBucket747CD8C0.Arn
              - !Join
                - ''
                - - !GetAtt SecureBucket747CD8C0.Arn
                  - /*
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource: !GetAtt InstallerKey2A6A8C6D.Arn
          - Action:
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:UploadArchive
              - codecommit:GetUploadArchiveStatus
              - codecommit:CancelUploadArchive
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:'
                - !Ref AWS::Partition
                - ':codecommit:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':'
                - !Ref RepositoryName
        Version: '2012-10-17'
      PolicyName: CodeCommitPipelineSourceCodePipelineActionRoleDefaultPolicyF71E0C0D
      Roles:
        - !Ref CodeCommitPipelineSourceCodePipelineActionRoleFB176191
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/CodeCommitPipeline/Source/Source/CodePipelineActionRole/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM5
            reason: IAM role requires wildcard permissions.
    Condition: UseCodeCommitCondition
  GitHubPipelineRole6F4DEF1B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/GitHubPipelineRole/Resource
    Condition: UseGitHubCondition
  GitHubPipelineRoleDefaultPolicyD82457D6:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt SecureBucket747CD8C0.Arn
              - !Join
                - ''
                - - !GetAtt SecureBucket747CD8C0.Arn
                  - /*
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource: !GetAtt InstallerKey2A6A8C6D.Arn
          - Action: sts:AssumeRole
            Effect: Allow
            Resource: !GetAtt GitHubPipelineRole6F4DEF1B.Arn
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:StopBuild
            Effect: Allow
            Resource: !GetAtt InstallerProject879FF821.Arn
        Version: '2012-10-17'
      PolicyName: GitHubPipelineRoleDefaultPolicyD82457D6
      Roles:
        - !Ref GitHubPipelineRole6F4DEF1B
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/GitHubPipelineRole/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM5
            reason: IAM role requires wildcard permissions.
    Condition: UseGitHubCondition
  GitHubPipeline7B79E906:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        EncryptionKey:
          Id: !GetAtt InstallerKey2A6A8C6D.Arn
          Type: KMS
        Location: !Ref SecureBucket747CD8C0
        Type: S3
      Name: !Join
        - ''
        - - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
          - '-Installer'
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt GitHubPipelineRole6F4DEF1B.Arn
      Stages:
        - Actions:
            - ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref RepositoryOwner
                Repo: !Ref RepositoryName
                Branch: !Ref RepositoryBranchName
                OAuthToken: '{{resolve:secretsmanager:accelerator/github-token:SecretString:::}}'
                PollForSourceChanges: false
              Name: Source
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
          Name: Source
        - Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref InstallerProject879FF821
              InputArtifacts:
                - Name: Source
              Name: Install
              RoleArn: !GetAtt GitHubPipelineRole6F4DEF1B.Arn
              RunOrder: 1
          Name: Install
    DependsOn:
      - GitHubPipelineRoleDefaultPolicyD82457D6
      - GitHubPipelineRole6F4DEF1B
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/GitHubPipeline/Resource
    Condition: UseGitHubCondition
  UpdatePipelineLambdaRole88CE0535:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/UpdatePipelineLambdaRole/Resource
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: Managed policies required for IAM role.
    Condition: UseGitHubCondition
  UpdatePipelineLambdaPolicy284ABC36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - codepipeline:GetPipeline
              - codepipeline:UpdatePipeline
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':codepipeline:'
                  - !Ref AWS::Region
                  - ':'
                  - !Ref AWS::AccountId
                  - ':'
                  - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
                  - '-Installer*'
              - !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':codepipeline:'
                  - !Ref AWS::Region
                  - ':'
                  - !Ref AWS::AccountId
                  - ':'
                  - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
                  - '-Pipeline*'
          - Action:
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:'
                - !Ref AWS::Partition
                - ':secretsmanager:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':secret:accelerator/github-token*'
          - Action: kms:Decrypt
            Effect: Allow
            Resource: '*'
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':iam::'
                  - !Ref AWS::AccountId
                  - ':role/'
                  - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
                  - '-*'
              - !GetAtt GitHubPipelineRole6F4DEF1B.Arn
        Version: '2012-10-17'
      PolicyName: UpdatePipelineLambdaPolicy284ABC36
      Roles:
        - !Ref UpdatePipelineLambdaRole88CE0535
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy should not allow * resource.
      cdk_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM5
            reason: IAM role requires wildcard permissions.
    Condition: UseGitHubCondition
  UpdatePipelineGithubTokenFunction29B64F2E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          /**
           *  Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
           *
           *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
           *  with the License. A copy of the License is located at
           *
           *      http://www.apache.org/licenses/LICENSE-2.0
           *
           *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
           *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
           *  and limitations under the License.
           */
          const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');
          const { CodePipelineClient, GetPipelineCommand, UpdatePipelineCommand } = require('@aws-sdk/client-codepipeline');
          const { ConfiguredRetryStrategy } = require('@aws-sdk/util-retry');
          const secretsManager = new SecretsManagerClient({
            retryStrategy: new ConfiguredRetryStrategy(10, attempt => 100 + attempt * 1000),
          });
          const codePipeline = new CodePipelineClient({
            retryStrategy: new ConfiguredRetryStrategy(10, attempt => 100 + attempt * 1000),
          });
          const installerPipelineName = process.env['INSTALLER_PIPELINE_NAME'] ?? '';
          const acceleratorPipelineName = process.env['ACCELERATOR_PIPELINE_NAME'] ?? '';
          const pipelineArray = [installerPipelineName, acceleratorPipelineName];
          /**
           * update-pipeline-github-token - lambda handler
           *
           * @param event
           * @returns
           */
          exports.handler = async (event, context) => {
            const secretDetails = event.detail.requestParameters;
            const secretArn = secretDetails.secretId;
            const secretValue = await getSecretValue(secretArn);
            await updatePipelineDetailsForBothPipelines(secretValue);
            return {
              statusCode: 200,
            };
          };
          async function getSecretValue(secretName) {
            try {
              const data = await secretsManager.send(
                new GetSecretValueCommand({
                  SecretId: secretName,
                }),
              );
              if (!data || !data.SecretString) {
                throw new Error(`Secret ${secretName} didn't exist.`);
              }
              console.log(`Retrieved secret: ${secretName}...`);
              return data.SecretString;
            } catch (error) {
              console.log(error);
              throw new Error(`Error retrieving secret: ${secretName}.`);
            }
          }
          async function updateCodePipelineSourceStage(pipelineDetails, secretValue) {
            const pipelineStages = pipelineDetails.pipeline.stages;
            const sourceStage = pipelineStages.find(o => o.name == 'Source');
            const sourceAction = sourceStage.actions.find(a => a.name == 'Source');
            if (sourceAction.actionTypeId.provider !== 'GitHub') {
              console.log('Pipeline source is not GitHub, no action will be taken.');
              return;
            }
            sourceAction.configuration.OAuthToken = secretValue;
            return pipelineDetails;
          }
          async function getPipelineDetails(pipelineName) {
            //This function retrieves the original Code Pipeline structure, so we can update it.
            const getPipelineParams = {
              name: pipelineName,
            };
            console.log(`Retrieving existing pipeline configuration for: ${pipelineName}...`);
            const pipelineObject = await codePipeline.send(new GetPipelineCommand(getPipelineParams));
            console.log(JSON.stringify(pipelineObject));
            return pipelineObject;
          }
          async function updatePipeline(updatedPipelineDetails) {
            //Remove metadata from getPipelineOutput to use as updatePipelineInput
            delete updatedPipelineDetails.metadata;
            console.log(`Updating pipeline with new OAuth Token...`);
            return codePipeline.send(new UpdatePipelineCommand(updatedPipelineDetails));
          }
          async function updatePipelineDetailsForBothPipelines(secretValue) {
            for (const pipeline of pipelineArray) {
              try {
                const pipelineDetails = await getPipelineDetails(pipeline);
                const updatedPipelineDetails = await updateCodePipelineSourceStage(pipelineDetails, secretValue);
                if (updatedPipelineDetails) {
                  await updatePipeline(updatedPipelineDetails);
                }
              } catch (error) {
                console.error(error);
                throw new Error(`Error occurred while updating pipeline ${pipeline}`);
              }
            }
          }
      Description: Lambda function to update CodePipeline OAuth Token
      Environment:
        Variables:
          ACCELERATOR_PIPELINE_NAME: !Join
            - ''
            - - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
              - '-Pipeline'
          INSTALLER_PIPELINE_NAME: !Join
            - ''
            - - !GetAtt ResourceNamePrefixesGetPrefixResource96A10E6E.acceleratorPrefix
              - '-Installer'
      Handler: index.handler
      KmsKeyArn: !GetAtt InstallerKey2A6A8C6D.Arn
      Role: !GetAtt UpdatePipelineLambdaRole88CE0535.Arn
      Runtime: nodejs18.x
      Timeout: 60
    DependsOn:
      - UpdatePipelineLambdaRole88CE0535
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/UpdatePipelineGithubTokenFunction/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole
          - id: W89
            reason: This function supports infrastructure deployment and is not deployed
              inside a VPC.
          - id: W92
            reason: This function supports infrastructure deployment and does not require
              setting ReservedConcurrentExecutions.
    Condition: UseGitHubCondition
  UpdatePipelineGithubTokenRule79D83132:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to trigger Lambda Function when the Github Accelerator Token
        has been updated.
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - secretsmanager.amazonaws.com
          eventName:
            - UpdateSecret
            - PutSecretValue
          requestParameters:
            secretId:
              - prefix: !Join
                  - ''
                  - - 'arn:'
                    - !Ref AWS::Partition
                    - ':secretsmanager:'
                    - !Ref AWS::Region
                    - ':'
                    - !Ref AWS::AccountId
                    - ':secret:accelerator/github-token'
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdatePipelineGithubTokenFunction29B64F2E.Arn
          Id: Target0
          RetryPolicy:
            MaximumEventAgeInSeconds: 14400
            MaximumRetryAttempts: 2
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/UpdatePipelineGithubTokenRule/Resource
    Condition: UseGitHubCondition
  UpdatePipelineGithubTokenRuleAllowEventRuleAWSAcceleratorInstallerStackUpdatePipelineGithubTokenFunction2367C02A6E48B7BC:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UpdatePipelineGithubTokenFunction29B64F2E.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UpdatePipelineGithubTokenRule79D83132.Arn
    Metadata:
      aws:cdk:path: AWSAccelerator-InstallerStack/UpdatePipelineGithubTokenRule/AllowEventRuleAWSAcceleratorInstallerStackUpdatePipelineGithubTokenFunction2367C02A
    Condition: UseGitHubCondition
  UpdatePipelineGithubTokenFunctionLogGroupFCE3723A:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref UpdatePipelineGithubTokenFunction29B64F2E
      RetentionInDays: 731
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log
              data
    Condition: UseGitHubCondition
Rules:
  RequiredParametersForCodeConnection:
    RuleCondition: !Equals
      - codeconnection
      - !Ref ConfigurationRepositoryLocation
    Assertions:
      - Assert: !Not
          - !Equals
            - ''
            - !Ref ConfigCodeConnectionArn
        AssertDescription: codeconnectionArn parameter must be provided when
          configRepositoryLocation is set to codeconnection
      - Assert: !Not
          - !Equals
            - 'No'
            - !Ref UseExistingConfigRepo
        AssertDescription: useExistingConfigRepo parameter must be set to "Yes" when
          configRepositoryLocation is set to codeconnection
      - Assert: !Not
          - !Equals
            - ''
            - !Ref ExistingConfigRepositoryOwner
        AssertDescription: existingConfigRepositoryOwner parameter must be populated
          when configRepositoryLocation is set to codeconnection
  RequiredParametersForExistingRepo:
    RuleCondition: !Equals
      - 'Yes'
      - !Ref UseExistingConfigRepo
    Assertions:
      - Assert: !Not
          - !Equals
            - ''
            - !Ref ExistingConfigRepositoryBranchName
        AssertDescription: existingConfigRepositoryBranchName parameter must be provided
          when useExistingRepository is set to Yes
      - Assert: !Not
          - !Equals
            - ''
            - !Ref ExistingConfigRepositoryName
        AssertDescription: existingConfigRepositoryName parameter must be provided when
          useExistingRepository is set to Yes
  RequiredParametersForS3Repo:
    RuleCondition: !Equals
      - s3
      - !Ref ConfigurationRepositoryLocation
    Assertions:
      - Assert: !And
          - !Equals
            - ''
            - !Ref ExistingConfigRepositoryName
          - !Equals
            - ''
            - !Ref ExistingConfigRepositoryBranchName
          - !Equals
            - 'No'
            - !Ref UseExistingConfigRepo
        AssertDescription: Existing configuration repository parameters cannot be
          provided when configurationRepositoryLocation is set to s3